/*
 * This file is generated by jOOQ.
 */
package com.apress.jooq.generated.tables;


import com.apress.jooq.generated.EdensCar;
import com.apress.jooq.generated.Indexes;
import com.apress.jooq.generated.Keys;
import com.apress.jooq.generated.tables.records.VehicleRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Vehicle extends TableImpl<VehicleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>edens_car.vehicle</code>
     */
    public static final Vehicle VEHICLE = new Vehicle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VehicleRecord> getRecordType() {
        return VehicleRecord.class;
    }

    /**
     * The column <code>edens_car.vehicle.vehicle_id</code>.
     */
    public final TableField<VehicleRecord, Long> VEHICLE_ID = createField(DSL.name("vehicle_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>edens_car.vehicle.vehicle_manufacturer</code>.
     */
    public final TableField<VehicleRecord, Long> VEHICLE_MANUFACTURER = createField(DSL.name("vehicle_manufacturer"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>edens_car.vehicle.vehicle_curr_price</code>.
     */
    public final TableField<VehicleRecord, BigDecimal> VEHICLE_CURR_PRICE = createField(DSL.name("vehicle_curr_price"), SQLDataType.DECIMAL(15, 4).nullable(false), this, "");

    /**
     * The column <code>edens_car.vehicle.vehicle_model_year</code>.
     */
    public final TableField<VehicleRecord, LocalDate> VEHICLE_MODEL_YEAR = createField(DSL.name("vehicle_model_year"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>edens_car.vehicle.vehicle_status</code>.
     */
    public final TableField<VehicleRecord, String> VEHICLE_STATUS = createField(DSL.name("vehicle_status"), SQLDataType.VARCHAR(45).nullable(false).defaultValue(DSL.inline("INACTIVE", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>edens_car.vehicle.vehicle_color</code>.
     */
    public final TableField<VehicleRecord, String> VEHICLE_COLOR = createField(DSL.name("vehicle_color"), SQLDataType.VARCHAR(35), this, "");

    /**
     * The column <code>edens_car.vehicle.vehicle_model_id</code>.
     */
    public final TableField<VehicleRecord, Long> VEHICLE_MODEL_ID = createField(DSL.name("vehicle_model_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>edens_car.vehicle.vehicle_trim</code>.
     */
    public final TableField<VehicleRecord, Long> VEHICLE_TRIM = createField(DSL.name("vehicle_trim"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>edens_car.vehicle.vehicle_style</code>.
     */
    public final TableField<VehicleRecord, Long> VEHICLE_STYLE = createField(DSL.name("vehicle_style"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>edens_car.vehicle.featured</code>.
     */
    public final TableField<VehicleRecord, Byte> FEATURED = createField(DSL.name("featured"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>edens_car.vehicle.created</code>.
     */
    public final TableField<VehicleRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>edens_car.vehicle.version</code>.
     */
    public final TableField<VehicleRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>edens_car.vehicle.options</code>.
     */
    public final TableField<VehicleRecord, Long> OPTIONS = createField(DSL.name("options"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>edens_car.vehicle.title</code>.
     */
    public final TableField<VehicleRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>edens_car.vehicle.contact</code>.
     */
    public final TableField<VehicleRecord, String> CONTACT = createField(DSL.name("contact"), SQLDataType.VARCHAR(45), this, "");

    private Vehicle(Name alias, Table<VehicleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vehicle(Name alias, Table<VehicleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>edens_car.vehicle</code> table reference
     */
    public Vehicle(String alias) {
        this(DSL.name(alias), VEHICLE);
    }

    /**
     * Create an aliased <code>edens_car.vehicle</code> table reference
     */
    public Vehicle(Name alias) {
        this(alias, VEHICLE);
    }

    /**
     * Create a <code>edens_car.vehicle</code> table reference
     */
    public Vehicle() {
        this(DSL.name("vehicle"), null);
    }

    public <O extends Record> Vehicle(Table<O> child, ForeignKey<O, VehicleRecord> key) {
        super(child, key, VEHICLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EdensCar.EDENS_CAR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VEHICLE_VEH_MANUFACTURER_ID_IDX, Indexes.VEHICLE_VEH_MODEL_ID_IDX, Indexes.VEHICLE_VEH_STYLE_IDX);
    }

    @Override
    public Identity<VehicleRecord, Long> getIdentity() {
        return (Identity<VehicleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VehicleRecord> getPrimaryKey() {
        return Keys.KEY_VEHICLE_PRIMARY;
    }

    @Override
    public List<ForeignKey<VehicleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VEH_MANUFACTURER_ID, Keys.VEH_MODEL_ID, Keys.VEH_STYLE);
    }

    private transient VehicleManufacturer _vehicleManufacturer;
    private transient VehicleModel _vehicleModel;
    private transient VehicleStyle _vehicleStyle;

    public VehicleManufacturer vehicleManufacturer() {
        if (_vehicleManufacturer == null)
            _vehicleManufacturer = new VehicleManufacturer(this, Keys.VEH_MANUFACTURER_ID);

        return _vehicleManufacturer;
    }

    public VehicleModel vehicleModel() {
        if (_vehicleModel == null)
            _vehicleModel = new VehicleModel(this, Keys.VEH_MODEL_ID);

        return _vehicleModel;
    }

    public VehicleStyle vehicleStyle() {
        if (_vehicleStyle == null)
            _vehicleStyle = new VehicleStyle(this, Keys.VEH_STYLE);

        return _vehicleStyle;
    }

    @Override
    public Vehicle as(String alias) {
        return new Vehicle(DSL.name(alias), this);
    }

    @Override
    public Vehicle as(Name alias) {
        return new Vehicle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicle rename(String name) {
        return new Vehicle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicle rename(Name name) {
        return new Vehicle(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, Long, BigDecimal, LocalDate, String, String, Long, Long, Long, Byte, LocalDateTime, Long, Long, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
