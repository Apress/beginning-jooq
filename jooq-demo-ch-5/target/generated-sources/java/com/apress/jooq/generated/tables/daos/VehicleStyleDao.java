/*
 * This file is generated by jOOQ.
 */
package com.apress.jooq.generated.tables.daos;


import com.apress.jooq.generated.tables.VehicleStyle;
import com.apress.jooq.generated.tables.records.VehicleStyleRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class VehicleStyleDao extends DAOImpl<VehicleStyleRecord, com.apress.jooq.generated.tables.pojos.VehicleStyle, Long> {

    /**
     * Create a new VehicleStyleDao without any configuration
     */
    public VehicleStyleDao() {
        super(VehicleStyle.VEHICLE_STYLE, com.apress.jooq.generated.tables.pojos.VehicleStyle.class);
    }

    /**
     * Create a new VehicleStyleDao with an attached configuration
     */
    @Autowired
    public VehicleStyleDao(Configuration configuration) {
        super(VehicleStyle.VEHICLE_STYLE, com.apress.jooq.generated.tables.pojos.VehicleStyle.class, configuration);
    }

    @Override
    public Long getId(com.apress.jooq.generated.tables.pojos.VehicleStyle object) {
        return object.getVehicleStyleId();
    }

    /**
     * Fetch records that have <code>vehicle_style_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.apress.jooq.generated.tables.pojos.VehicleStyle> fetchRangeOfVehicleStyleId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(VehicleStyle.VEHICLE_STYLE.VEHICLE_STYLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>vehicle_style_id IN (values)</code>
     */
    public List<com.apress.jooq.generated.tables.pojos.VehicleStyle> fetchByVehicleStyleId(Long... values) {
        return fetch(VehicleStyle.VEHICLE_STYLE.VEHICLE_STYLE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>vehicle_style_id = value</code>
     */
    public com.apress.jooq.generated.tables.pojos.VehicleStyle fetchOneByVehicleStyleId(Long value) {
        return fetchOne(VehicleStyle.VEHICLE_STYLE.VEHICLE_STYLE_ID, value);
    }

    /**
     * Fetch records that have <code>vehicle_style_name BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<com.apress.jooq.generated.tables.pojos.VehicleStyle> fetchRangeOfVehicleStyleName(String lowerInclusive, String upperInclusive) {
        return fetchRange(VehicleStyle.VEHICLE_STYLE.VEHICLE_STYLE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>vehicle_style_name IN (values)</code>
     */
    public List<com.apress.jooq.generated.tables.pojos.VehicleStyle> fetchByVehicleStyleName(String... values) {
        return fetch(VehicleStyle.VEHICLE_STYLE.VEHICLE_STYLE_NAME, values);
    }

    /**
     * Fetch records that have <code>vehicle_style_status BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<com.apress.jooq.generated.tables.pojos.VehicleStyle> fetchRangeOfVehicleStyleStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(VehicleStyle.VEHICLE_STYLE.VEHICLE_STYLE_STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>vehicle_style_status IN (values)</code>
     */
    public List<com.apress.jooq.generated.tables.pojos.VehicleStyle> fetchByVehicleStyleStatus(String... values) {
        return fetch(VehicleStyle.VEHICLE_STYLE.VEHICLE_STYLE_STATUS, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.apress.jooq.generated.tables.pojos.VehicleStyle> fetchRangeOfVersion(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(VehicleStyle.VEHICLE_STYLE.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<com.apress.jooq.generated.tables.pojos.VehicleStyle> fetchByVersion(Long... values) {
        return fetch(VehicleStyle.VEHICLE_STYLE.VERSION, values);
    }
}
