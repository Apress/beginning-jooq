/*
 * This file is generated by jOOQ.
 */
package com.apress.jooq.generated.tables;


import com.apress.jooq.generated.EdensCar;
import com.apress.jooq.generated.Keys;
import com.apress.jooq.generated.tables.records.VehicleManufacturerRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VehicleManufacturer extends TableImpl<VehicleManufacturerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>edens_car.vehicle_manufacturer</code>
     */
    public static final VehicleManufacturer VEHICLE_MANUFACTURER = new VehicleManufacturer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VehicleManufacturerRecord> getRecordType() {
        return VehicleManufacturerRecord.class;
    }

    /**
     * The column <code>edens_car.vehicle_manufacturer.manufacturer_id</code>.
     */
    public final TableField<VehicleManufacturerRecord, Long> MANUFACTURER_ID = createField(DSL.name("manufacturer_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>edens_car.vehicle_manufacturer.manufacturer_name</code>.
     */
    public final TableField<VehicleManufacturerRecord, String> MANUFACTURER_NAME = createField(DSL.name("manufacturer_name"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>edens_car.vehicle_manufacturer.status</code>.
     */
    public final TableField<VehicleManufacturerRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(15).nullable(false).defaultValue(DSL.inline("ACTIVE", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>edens_car.vehicle_manufacturer.version</code>.
     */
    public final TableField<VehicleManufacturerRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT, this, "");

    private VehicleManufacturer(Name alias, Table<VehicleManufacturerRecord> aliased) {
        this(alias, aliased, null);
    }

    private VehicleManufacturer(Name alias, Table<VehicleManufacturerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>edens_car.vehicle_manufacturer</code> table
     * reference
     */
    public VehicleManufacturer(String alias) {
        this(DSL.name(alias), VEHICLE_MANUFACTURER);
    }

    /**
     * Create an aliased <code>edens_car.vehicle_manufacturer</code> table
     * reference
     */
    public VehicleManufacturer(Name alias) {
        this(alias, VEHICLE_MANUFACTURER);
    }

    /**
     * Create a <code>edens_car.vehicle_manufacturer</code> table reference
     */
    public VehicleManufacturer() {
        this(DSL.name("vehicle_manufacturer"), null);
    }

    public <O extends Record> VehicleManufacturer(Table<O> child, ForeignKey<O, VehicleManufacturerRecord> key) {
        super(child, key, VEHICLE_MANUFACTURER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EdensCar.EDENS_CAR;
    }

    @Override
    public Identity<VehicleManufacturerRecord, Long> getIdentity() {
        return (Identity<VehicleManufacturerRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VehicleManufacturerRecord> getPrimaryKey() {
        return Keys.KEY_VEHICLE_MANUFACTURER_PRIMARY;
    }

    @Override
    public List<UniqueKey<VehicleManufacturerRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_VEHICLE_MANUFACTURER_MANUFACTURER_NAME_UNIQUE);
    }

    @Override
    public VehicleManufacturer as(String alias) {
        return new VehicleManufacturer(DSL.name(alias), this);
    }

    @Override
    public VehicleManufacturer as(Name alias) {
        return new VehicleManufacturer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VehicleManufacturer rename(String name) {
        return new VehicleManufacturer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VehicleManufacturer rename(Name name) {
        return new VehicleManufacturer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
